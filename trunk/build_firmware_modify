#!/bin/bash

if [ -z "$1" ] || [ "$EUID" != 0 ]; then
	echo "Please run 'fakeroot $0 PRODUCT_NAME' to start build (see 'configs/templates/')"
	echo "For Windows Subsystem for Linux(WSL), use 'fakeroot-tcp' instead of 'fakeroot', or run with sudo"
	exit 1
fi

if [ -z "$2" ];then
if [ ! -f configs/templates/$1.config ] ; then
	echo "configs/templates/$1.config not found "
	exit 1
fi

cp -f configs/templates/$1.config .config
sed -i 's/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=y/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n/g' .config
sed -i 's/CONFIG_FIRMWARE_INCLUDE_MENTOHUST=y/CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n/g' .config
sed -i 's/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=y/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n/g' .config
sed -i 's/CONFIG_FIRMWARE_INCLUDE_SRELAY=y/CONFIG_FIRMWARE_INCLUDE_SRELAY=n/g' .config
sed -i 's/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=n/g' .config

###########################################Removal step#######################################################
##This is used to reduce firmware size for minimalism
sed -i '/CONFIG_FIRMWARE_INCLUDE_EAP_PEAP/d' .config #Disable WPA2-Enterprise
sed -i '/CONFIG_FIRMWARE_INCLUDE_HTTPS/d' .config #Disable HTTPS login
sed -i '/CONFIG_FIRMWARE_INCLUDE_DROPBEAR/d' .config #Disable Dropbear SSH (also SCP/RCP)
sed -i '/CONFIG_FIRMWARE_INCLUDE_DROPBEAR_FAST_CODE/d' .config #Disable Dropbear SSH
sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSH/d' .config #Disable OpenSSH
sed -i '/CONFIG_FIRMWARE_INCLUDE_SFTP/d' .config #Disable SFTP (need OpenSSH to work)
sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENVPN/d' .config #Disable OpenVPN
sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EC/d' .config #Elliptic Curves 
sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE/d' .config #"openssl" executable for generate certificates
sed -i '/CONFIG_FIRMWARE_INCLUDE_SSWAN/d' .config #StrongSwan is IPSec MultiClient
sed -i '/CONFIG_FIRMWARE_INCLUDE_TRANSMISSION/d' .config #Disable Torrent Client
sed -i '/CONFIG_FIRMWARE_INCLUDE_TRANSMISSION_WEB_CONTROL/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_ARIA/d' .config #Disable Aria Web
sed -i '/CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL/d' .config
##Proprietary tool
sed -i '/CONFIG_FIRMWARE_INCLUDE_CURL/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_NANO/d' .config #I started to liek the VI command more
sed -i '/CONFIG_FIRMWARE_INCLUDE_HTOP/d' .config #Delete CLI Task manager
sed -i '/CONFIG_FIRMWARE_INCLUDE_IPERF3/d' .config #This is a speed testing tool
sed -i '/CONFIG_FIRMWARE_INCLUDE_WIREGUARD/d' .config #Delete Wireguard
##Chinese stuff
sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #Delete SCUTCLIENT
sed -i '/CONFIG_FIRMWARE_INCLUDE_DOGCOM/d' .config #Delete DOGCOM battery
sed -i '/CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT/d' .config #Delete what i know nothing about it
sed -i '/CONFIG_FIRMWARE_INCLUDE_VLMCSD/d' .config #Delete virtual KMS server
sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #Delete MENTOHUST
sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIEAP/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config #Delete Proxy client
sed -i '/CONFIG_FIRMWARE_INCLUDE_SOCAT/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #Delete SS plus+
sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #Delete DNSFORWARDER
sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #Delete adbyby plus+
sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config
sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #Delete AliDDNS
sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config #Delete Smart DDNS
sed -i '/CONFIG_FIRMWARE_INCLUDE_TROJAN/d' .config #Delete Trojan- Chinese GFW bypassing tool

###########################################Adding step#######################################################
##The following are the plug-in increase and decrease options, y means integrated, n means not integrated, 
##Please choose according to the size of the FLASH of your route, don't oversize, otherwise the firmware will not start after flashing in
##This plugin option will only take effect when compiling locally
##Proprietary things
echo "CONFIG_FIRMWARE_INCLUDE_EAP_PEAP=n" >> .config #openssl 1.2M, wpa_supplicant 0.04M
echo "CONFIG_FIRMWARE_INCLUDE_HTTPS=n" >> .config #openssl 1.2M
echo "CONFIG_FIRMWARE_INCLUDE_SFTP=n" >> .config #openssl 1.2M, sftp-server 0.06M
echo "CONFIG_FIRMWARE_INCLUDE_DROPBEAR=y" >> .config #0.3M
echo "CONFIG_FIRMWARE_INCLUDE_DROPBEAR_FAST_CODE=n" >> .config #0.06M
echo "CONFIG_FIRMWARE_INCLUDE_OPENSSH=n" >> .config #openssl 1.2M, openssh 1.0M
echo "CONFIG_FIRMWARE_INCLUDE_OPENVPN=n" >> .config #openssl 1.2M, openvpn ~0.4M
echo "CONFIG_FIRMWARE_INCLUDE_SSWAN=n" >> .config #XFRM modules 0.2M, strongswan ~0.7M
echo "CONFIG_FIRMWARE_INCLUDE_OPENSSL_EC=n" >> .config #0.1M
echo "CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n" >> .config #0.4M
echo "CONFIG_FIRMWARE_INCLUDE_TRANSMISSION=n" >> .config #openssl 1.2M, transmission 1.5M
echo "CONFIG_FIRMWARE_INCLUDE_TRANSMISSION_WEB_CONTROL=n" >> .config #advanced WebUI 0.8M
echo "CONFIG_FIRMWARE_INCLUDE_ARIA=n" >> .config #openssl 1.2M, aria2 3.5M
echo "CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL=n" >> .config #0.7M

##Proprietary tool
echo "CONFIG_FIRMWARE_INCLUDE_CURL=n" .config
echo "CONFIG_FIRMWARE_INCLUDE_HTOP=n" >> .config
echo "CONFIG_FIRMWARE_INCLUDE_NANO=n" >> .config 
echo "CONFIG_FIRMWARE_INCLUDE_IPERF3=n" >> .config
echo "CONFIG_FIRMWARE_INCLUDE_SOCAT=n" .config #Bidirectional NetCat

##Chinese Services
echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n" >> .config #SCUTCLIENT
echo "CONFIG_FIRMWARE_INCLUDE_DOGCOM=n" >> .config #DOGCOM battery
echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config #MENTOHUST 1.2M
echo "CONFIG_FIRMWARE_INCLUDE_MINIEAP=n" >> .config #EAP-MD5-Challenge Client- a MENTOHUST related
echo "CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=n" >> .config #Nanjing Institute of Technology Client 0.4M
echo "CONFIG_FIRMWARE_INCLUDE_VLMCSD=n" >> .config #Virtual KMS server 2.1M


##Science Online##
echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=n" >> .config #Scientific online plug-in, after selecting n, all related plug-ins are integrated
echo "CONFIG_FIRMWARE_INCLUDE_XRAY=n" >> .config #Integrate xray execution file  4.5M
echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n" >> .config #Integrate v2ray execution file
echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=n" >> .config #Integrate trojan execution file  1.2M
echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=n" >> .config #simple-obfs obfuscation plugin
echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #Socks 4/5 protocol proxy server 0.8M

##Advertisement Management##
echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=n" >> .config #adbyby plus+

##DNS Service##
echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=n" >> .config #smartdns 0.5M
echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=n" >> .config #adguard home adblock
echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n" >> .config #DNSFORWARDER

##Intranet penetration service##
echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y" >> .config #zerotier 1.3M
echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=n" >> .config #aliddns
echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=n" >> .config #ddnsto  0.5M

##Intranet quality enhance service##
echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=n" >> .config  #ALDRIVER  3M
echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config #mentohust
echo "CONFIG_FIRMWARE_INCLUDE_SQM=n" >> .config #Remember that SQM will affects the HWNAT Offloading Function!
echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=n" >>.config #wireguard 10K
echo "CONFIG_FIRMWARE_INCLUDE_FRPC=n" >> .config #frpc
echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #frps

#CPU overclocking
echo "CONFIG_FIRMWARE_INCLUDE_OC=n" >> .config #CPU overclocking switch
echo 'CONFIG_FIRMWARE_MT7621_OC="0x312"' >> .config #Fill in the hexadecimal of the corresponding freqï¼š1000Mhz=0x312 1100Mhz=0x362 1120Mhz=0x372 1200Mhz=0x3B2

fi

ROOTDIR=`pwd`
export ROOTDIR=$ROOTDIR

kernel_id="4.4.x"
kernel_cf=""
kernel_tf=""
busybox_id="1.24.x"
busybox_cf="$ROOTDIR/configs/boards/busybox.config"
busybox_tf="$ROOTDIR/user/busybox/busybox-${busybox_id}/.config"
board_h=""
board_mk=""
paragon_hfsplus=0

func_enable_kernel_param()
{
	if [ ! -n "$2" ];then
		own="y"
	else
		own="m"
	fi
	
	if [ -n "`grep \^\"\# $1 is not set\" $kernel_tf`" ] ; then
		sed -i "s/\# $1 is not set/$1=$own/" $kernel_tf
	fi
}

func_disable_kernel_param()
{
	if [ -n "`grep \^$1=y $kernel_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $kernel_tf
	elif [ -n "`grep \^$1=m $kernel_tf`" ] ; then
		sed -i "s/$1=m/\# $1 is not set/" $kernel_tf
	fi
}

func_enable_busybox_param()
{
	if [ -n "`grep \^\"\# $1 is not set\" $busybox_tf`" ] ; then
		sed -i "s/\# $1 is not set/$1=y/" $busybox_tf
	fi
}

func_disable_busybox_param()
{
	if [ -n "`grep \^$1=y $busybox_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $busybox_tf
	fi
}
. $ROOTDIR/toolchain.inc
echo "CONFIG_TOOLCHAIN_DIR=${CONFIG_TOOLCHAIN_DIR}" >> .config

# load project root config
. $ROOTDIR/.config

if [ ! -f "$ROOTDIR/vendors/Ralink/config.arch" ] ; then
	echo "Project product dir not found! Terminate."
	exit 1
fi

if [ ! -d "$ROOTDIR/$CONFIG_LINUXDIR" ] ; then
	echo "Project Linux Kernel dir ($CONFIG_LINUXDIR) not found! Terminate."
	exit 1
fi

board_h="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/board.h"
board_mk="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/board.mk"
kernel_cd="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID"
kernel_tf="$ROOTDIR/$CONFIG_LINUXDIR/.config"

if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
	kernel_cf="${kernel_cd}/kernel-${kernel_id}.ram.config"
elif [ -n "$CONFIG_FIRMWARE_KERNEL_CONFIG" ]; then
	kernel_cf="${kernel_cd}/$CONFIG_FIRMWARE_KERNEL_CONFIG"
else
	kernel_cf="${kernel_cd}/kernel-${kernel_id}.config"
fi

if [ ! -f "$kernel_cf" ] ; then
	echo "Target kernel config ($kernel_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$busybox_cf" ] ; then
	echo "Target BusyBox config ($busybox_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$board_h" ] ; then
	echo "Target board header ($board_h) not found! Terminate."
	exit 1
fi

if [ ! -f "$board_mk" ] ; then
	echo "Target board descriptor ($board_mk) not found! Terminate."
	exit 1
fi

rm -rf $ROOTDIR/romfs
rm -rf $ROOTDIR/images
mkdir -p $ROOTDIR/romfs
mkdir -p $ROOTDIR/images

# load source kernel config
. "$kernel_cf"

echo --------------------------COPY-CONFIG-----------------------------
######################### FOR-ALL-DEVICES #############################
ln -sf vendors/Ralink/config.arch config.arch
cp -fL "$kernel_cf" "$kernel_tf"
cp -fL "$busybox_cf" "$busybox_tf"
cp -fL "$board_mk" "$ROOTDIR/user/shared/board.mk"
cp -fL "$board_h" "$ROOTDIR/user/shared/include/ralink_board.h"
############################# SMP #####################################
if [ -n "$CONFIG_SMP" ] ; then
	func_enable_busybox_param "CONFIG_FEATURE_TOP_SMP_CPU"
	func_enable_busybox_param "CONFIG_FEATURE_TOP_SMP_PROCESS"
fi
############################# RTC #####################################
if [ -n "$CONFIG_RTC_CLASS" ] ; then
	func_enable_busybox_param "CONFIG_HWCLOCK"
fi
# SFE
if [ "$CONFIG_FIRMWARE_INCLUDE_SFE" = "y" ] ; then
	func_enable_kernel_param "CONFIG_SHORTCUT_FE"
fi
# wireguard
if [ "$CONFIG_FIRMWARE_INCLUDE_WIREGUARD" = "y" ]; then
	func_enable_kernel_param "CONFIG_WIREGUARD"
else
	func_disable_kernel_param "CONFIG_WIREGUARD"
fi
# SQM QOS
if [ "$CONFIG_FIRMWARE_INCLUDE_SQM" = "y" ]; then
	func_enable_kernel_param "CONFIG_NF_CONNTRACK_EVENTS"
	sed -i "/CONFIG_NF_CONNTRACK_EVENTS=y/a\CONFIG_NF_CONNTRACK_CHAIN_EVENTS=y" $kernel_tf
	func_enable_kernel_param "CONFIG_NF_CONNTRACK_TIMEOUT"
	func_enable_kernel_param "CONFIG_NET_SCH_SFQ" "m"
	sed -i "/CONFIG_NET_SCH_SFQ=m/a\CONFIG_NET_SCH_CAKE=m" $kernel_tf
	func_enable_kernel_param "CONFIG_NET_SCH_CODEL" "m"
	func_enable_kernel_param "CONFIG_NET_ACT_IPT" "m"
	func_enable_kernel_param "CONFIG_IFB"
fi
#cpuè¶…é¢‘
if [ "$CONFIG_FIRMWARE_INCLUDE_OC" = "y" ]; then	
	sed -i "/CONFIG_RALINK_MT7621=y/a\CONFIG_MT7621_OC=y" $kernel_tf
	sed -i '/CONFIG_MT7621_OC=y/a\CONFIG_MT7621_CPU_FREQ="'$CONFIG_FIRMWARE_MT7621_OC'"' $kernel_tf
fi

############################# USB #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_USB_SUPPORT" ] ; then
	func_disable_busybox_param "CONFIG_FDISK"
	func_disable_busybox_param "CONFIG_FEATURE_FDISK_WRITABLE"
	func_disable_busybox_param "CONFIG_FEATURE_FDISK_ADVANCED"
	func_disable_busybox_param "CONFIG_MICROCOM"
	func_disable_busybox_param "CONFIG_EJECT"
	func_disable_busybox_param "CONFIG_FEATURE_EJECT_SCSI"
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_FAT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_NTFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_LINUXSWAP"
else
if [ "$CONFIG_FIRMWARE_ENABLE_UFSD" != "y" ] || [ $paragon_hfsplus -eq 0 ] ; then
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
fi
############################ exFAT ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXFAT" != "y" ] ; then
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
fi
############################# XFS #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_XFS" != "y" ] ; then
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
fi
############################# SWAP ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_SWAP" != "y" ] ; then
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
fi
fi
############################# XFRM ####################################
#if [ "$CONFIG_FIRMWARE_INCLUDE_SSWAN" = "y" ] ; then
#	CONFIG_FIRMWARE_INCLUDE_XFRM=y
#fi
echo --------------------------MAKE-DEP--------------------------------
make dep
echo --------------------------MAKE-ALL--------------------------------
make
